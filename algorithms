import time
import dateparser
import pytz
from datetime import datetime
import urllib3
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math

def sma(a, n=3) :
    """Calcula la media movil
    Recibe una lista a y n periodos
    Devuelve el vector incompleto con la misma cantidad miembros"""
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    b = np.repeat(None, (n - 1))
    return np.concatenate((b,ret[n - 1:] / n))


def ema(s, n):
    """Calcula la media movil exponencial
    Recibe una lista a y n periodos
    Devuelve el vector incompleto con la misma cantidad miembros"""
    ema = []
    j = 1
    #get n sma first and calculate the next n period ema
    sma = sum(s[:n]) / n
    multiplier = 2 / float(1 + n)
    ema.append(sma)
    #EMA(current) = ( (Price(current) - EMA(prev) ) x Multiplier) + EMA(prev)
    ema.append(( (s[n] - sma) * multiplier) + sma)
    #now calculate the rest of the values
    for i in s[n+1:]:
        tmp = ( (i - ema[j]) * multiplier) + ema[j]
        j = j + 1
        ema.append(tmp)
    b = []
    b = np.repeat(None, (n-1))
    return np.concatenate((b,ema), axis=None)


def emawonone(s, n):
    """Calcula la media movil exponencial
    Recibe una lista a y n periodos
    Devuelve el vector completo con la misma cantidad miembros"""
    ema = []
    j = 1
    #get n sma first and calculate the next n period ema
    sma = sum(s[:n]) / n
    multiplier = 2 / float(1 + n)
    ema.append(sma)
    #EMA(current) = ( (Price(current) - EMA(prev) ) x Multiplier) + EMA(prev)
    ema.append(( (s[n] - sma) * multiplier) + sma)
    #now calculate the rest of the values
    for i in s[n+1:]:
        tmp = ( (i - ema[j]) * multiplier) + ema[j]
        j = j + 1
        ema.append(tmp)
    b = []    
    return np.concatenate((b,ema), axis=None)
    
    
def exponentialmovingaverage(price, time, amq, amm, ams):
    lastvalue = len(price) - 1
    AMquick = ema(price, amq)
    AMmedium = ema(price, amm)
    AMslow = ema(price, ams)
    x = np.asarray(time)
    graphicator(x, price, AMslow, AMmedium, AMquick)  
    
    if (AMquick[lastvalue] > AMslow[lastvalue]):
        status = True
    else:
        status = False
    return status
        

def macd(price, time):
    
    #Creacion de las variables iniciales
    lastvalue = len(price) - 1
    PMEs = ema( price, 12)
    PMEq = ema( price, 26)
    MACD0 = []
    MACD1 = []
    Histograme = []
    zero = np.zeros(len(price))
    #Calculamos el MACD
    for i in range(len(price)):
        if i < 26:
            MACD0.append(None)
        elif i >= 26:
            result = PMEs[i] - PMEq[i] 
            MACD1.append(result)
    #Calculamos la signal     
    signal0 = ema(MACD1, 9)
    #Ordenamos MACD y Signal
    signal = np.concatenate((MACD0,signal0), axis=None)
    MACD = np.concatenate((MACD0,MACD1), axis=None)
    #Calculamos el histograma
    for i in range(len(price)):
        if (MACD[i]== None or signal[i]== None):
            Histograme.append(None)
        else:
            result = MACD[i] - signal[i] 
            Histograme.append(result)

    x = np.asarray(time)
    graphicator(x, MACD, signal, Histograme, zero)  
    if (MACD[lastvalue] > signal[lastvalue]):
        status = True
    else:
        status = False
    return status
